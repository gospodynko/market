<?xml version="1.0" encoding="UTF-8"?>
<project name="agroyard-api" default="full-build">
 <!-- By default, we assume all tools to be on the $PATH -->
 <property name="pdepend"   value="pdepend"/>
 <property name="phpcpd"    value="phpcpd"/>
 <property name="phpcs"     value="phpcs"/>
 <property name="phpdox"    value="phpdox"/>
 <property name="phploc"    value="phploc"/>
 <property name="phpmd"     value="phpmd"/>
 <property name="phpunit"   value="phpunit"/>
 <property name="composer"  value="composer"/>

 <!-- Use this when the tools are located as PHARs in ${basedir}/build/tools
 <property name="pdepend" value="${basedir}/build/tools/pdepend.phar"/>
 <property name="phpcpd"  value="${basedir}/build/tools/phpcpd.phar"/>
 <property name="phpcs"   value="${basedir}/build/tools/phpcs.phar"/>
 <property name="phpdox"  value="${basedir}/build/tools/phpdox.phar"/>
 <property name="phploc"  value="${basedir}/build/tools/phploc.phar"/>
 <property name="phpmd"   value="${basedir}/build/tools/phpmd.phar"/>
 <property name="phpunit" value="${basedir}/build/tools/phpunit.phar"/> -->

 <!-- Use this when the tools are managed by Composer in ${basedir}/vendor/bin
 <property name="pdepend" value="${basedir}/vendor/bin/pdepend"/>
 <property name="phpcpd"  value="${basedir}/vendor/bin/phpcpd"/>
 <property name="phpcs"   value="${basedir}/vendor/bin/phpcs"/>
 <property name="phpdox"  value="${basedir}/vendor/bin/phpdox"/>
 <property name="phploc"  value="${basedir}/vendor/bin/phploc"/>
 <property name="phpmd"   value="${basedir}/vendor/bin/phpmd"/>
 <property name="phpunit" value="${basedir}/vendor/bin/phpunit"/> -->

 <target name="full-build"
         depends="composer-update,laravel-prepare,prepare,static-analysis,phpunit,phpdox,phpunit-coverage,-check-failure"
         description="Performs static analysis, runs the tests, and generates project documentation"/>

 <target name="full-build-parallel"
         depends="composer-update,laravel-prepare,prepare,static-analysis-parallel,phpunit,phpdox,-check-failure"
         description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

 <target name="quick-build"
         depends="composer-update,laravel-prepare,prepare,lint,phpunit-no-coverage"
         description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

 <target name="static-analysis"
         depends="composer-update,laravel-prepare,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
         description="Performs static analysis" />

 <target name="composer-full"
         depends="composer-clean,composer,composer-dump-autoload"
         description="Composer instllation" />

 <target name="composer-update"
         depends="composer-clear-cache,composer,composer-dump-autoload"
         description="Composer instllation" />

 <!-- Adjust the threadCount attribute's value to the number of CPUs -->
 <target name="static-analysis-parallel"
         description="Performs static analysis (executing the tools in parallel)">
  <parallel threadCount="2">
   <sequential>
    <antcall target="pdepend"/>
    <antcall target="phpmd-ci"/>
   </sequential>
   <antcall target="lint"/>
   <antcall target="phpcpd-ci"/>
   <antcall target="phpcs-ci"/>
   <antcall target="phploc-ci"/>
  </parallel>
 </target>

 <target name="clean"
         unless="clean.done"
         description="Cleanup build artifacts">
  <delete dir="${basedir}/build/api"/>
  <delete dir="${basedir}/build/coverage"/>
  <delete dir="${basedir}/build/logs"/>
  <delete dir="${basedir}/build/pdepend"/>
  <delete dir="${basedir}/build/phpdox"/>
  <property name="clean.done" value="true"/>
 </target>

 <target name="prepare"
         unless="prepare.done"
         depends="clean"
         description="Prepare for build">
  <mkdir dir="${basedir}/build/api"/>
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <mkdir dir="${basedir}/build/phpdox"/>
  <property name="prepare.done" value="true"/>
 </target>

 <target name="lint"
         unless="lint.done"
         description="Perform syntax check of sourcecode files">
  <apply executable="php" taskname="lint">
   <arg value="-l" />

   <fileset dir="${basedir}/">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/tests">
    <include name="**/*.php" />
    <modified />
   </fileset>
  </apply>

  <property name="lint.done" value="true"/>
 </target>

 <target name="phploc"
         unless="phploc.done"
         description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
  <exec executable="${phploc}" taskname="phploc">
   <arg value="--count-tests" />
   <arg value="--exclude=vendor" />
   <arg path="${basedir}/" />
   <arg path="${basedir}/tests" />
  </exec>

  <property name="phploc.done" value="true"/>
 </target>

 <target name="phploc-ci"
         unless="phploc.done"
         depends="prepare"
         description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phploc}" taskname="phploc">
   <arg value="--count-tests" />
   <arg value="--exclude=vendor" />
   <arg value="--log-csv" />
   <arg path="${basedir}/build/logs/phploc.csv" />
   <arg value="--log-xml" />
   <arg path="${basedir}/build/logs/phploc.xml" />
   <arg path="${basedir}/" />
   <arg path="${basedir}/tests" />
  </exec>

  <property name="phploc.done" value="true"/>
 </target>

 <target name="pdepend"
         unless="pdepend.done"
         depends="prepare"
         description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${pdepend}" taskname="pdepend">
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg value="--ignore=${basedir}/vendor/" />
   <arg path="${basedir}/" />
  </exec>

  <property name="pdepend.done" value="true"/>
 </target>

 <target name="phpmd"
         unless="phpmd.done"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${phpmd}" taskname="phpmd">
   <arg path="${basedir}/" />
   <arg value="text" />
   <arg path="${basedir}/build/phpmd.xml" />
  </exec>

  <property name="phpmd.done" value="true"/>
 </target>

 <target name="phpmd-ci"
         unless="phpmd.done"
         depends="prepare"
         description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phpmd}" taskname="phpmd">
   <arg path="${basedir}/" />
   <arg value="xml" />
   <arg path="${basedir}/build/phpmd.xml" />
   <arg value="--reportfile" />
   <arg path="${basedir}/build/logs/pmd.xml" />
   <arg value="--exclude" />
   <arg path="${basedir}/vendor" />
  </exec>
  <property name="phpmd.done" value="true"/>
 </target>

 <target name="phpcs"
         unless="phpcs.done"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${phpcs}" taskname="phpcs">
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg value="--ignore=${basedir}/vendor" />
   <arg value="--ignore=autoload.php" />
   <arg path="${basedir}/" />
   <arg path="${basedir}/tests" />
  </exec>

  <property name="phpcs.done" value="true"/>
 </target>

 <target name="phpcs-ci"
         unless="phpcs.done"
         depends="prepare"
         description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg value="--ignore=${basedir}/vendor" />
   <arg value="--ignore=autoload.php" />
   <arg path="${basedir}/" />
   <arg path="${basedir}/tests" />
  </exec>

  <property name="phpcs.done" value="true"/>
 </target>

 <target name="phpcpd"
         unless="phpcpd.done"
         description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${phpcpd}" taskname="phpcpd">
   <arg path="${basedir}/" />
   <arg value="--exclude=vendor" />
  </exec>

  <property name="phpcpd.done" value="true"/>
 </target>

 <target name="phpcpd-ci"
         unless="phpcpd.done"
         depends="prepare"
         description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phpcpd}" taskname="phpcpd">
   <arg value="--log-pmd" />
   <arg path="${basedir}/build/logs/pmd-cpd.xml" />
   <arg path="${basedir}/" />
   <arg value="--exclude=vendor" />
  </exec>

  <property name="phpcpd.done" value="true"/>
 </target>

 <target name="phpunit"
         unless="phpunit.done"
         depends="prepare"
         description="Run unit tests with PHPUnit">
  <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
   <arg value="--configuration"/>
   <arg path="${basedir}/phpunit.xml"/>
  </exec>

  <property name="phpunit.done" value="true"/>
 </target>

 <target name="phpunit-coverage" depends="prepare" description="PHP unit with code coverage">
        <delete file="${basedir}/build/logs/phpunit.xml" quiet="true" />
        <delete file="${basedir}/build/logs/clover.xml" quiet="true" />
        <delete dir="${basedir}/build/coverage" quiet="true" />
        <mkdir dir="${basedir}/build/coverage" />

        <exec executable="${phpunit}">
            <arg line='--configuration ${basedir}/phpunit.xml' />
            <arg line='-d memory_limit=256M' />
            <arg line='--log-junit "${basedir}/build/logs/phpunit.xml"' />
            <arg line='--coverage-clover "${basedir}/build/logs/clover.xml"' />
            <arg line='--coverage-crap4j "${basedir}/build/logs/crap4j.xml"' />
            <arg line='--log-junit "${basedir}/build/logs/junit.xml"' />
            <arg line='--coverage-html "${basedir}/build/coverage/"' />
        </exec>
    </target>

 <target name="phpunit-no-coverage"
         unless="phpunit.done"
         depends="prepare"
         description="Run unit tests with PHPUnit (without generating code coverage reports)">
  <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
   <arg value="--configuration"/>
   <arg path="${basedir}/phpunit.xml"/>
   <arg value="--no-coverage"/>
  </exec>

  <property name="phpunit.done" value="true"/>
 </target>

 <target name="phpdox"
         unless="phpdox.done"
         depends="phploc-ci,phpcs-ci,phpmd-ci"
         description="Generate project documentation using phpDox">
  <exec executable="${phpdox}" dir="${basedir}/build" taskname="phpdox"/>

  <property name="phpdox.done" value="true"/>
 </target>

<!-- COMPOSER -->
    <target name="composer-clean" description="Cleanup build artifacts">
        <delete dir="${basedir}/vendor"/>
        <delete file="${basedir}/composer.lock"/>
    </target>

<!--    <target name="composer" depends="composer-clean" description="Install dependencies with Composer"> -->
    <target name="composer" description="Install dependencies with Composer">
        <exec executable="composer" taskname="composer">
            <arg value="update"/>
            <arg value="--no-interaction"/>
            <arg value="--no-progress"/>
            <arg value="--no-ansi"/>
            <arg value="--no-suggest"/>
            <arg value="--optimize-autoloader"/>
            <arg value="--prefer-stable"/>
        </exec>
    </target>

    <target name="composer-dump-autoload">
        <exec executable="composer">
            <arg value="dump-autoload"  />
            <arg value="-o"  />
        </exec>
    </target>

    <target name="composer-clear-cache">
        <exec executable="composer">
            <arg value="clearcache"  />
        </exec>
    </target>

<!-- COMPOSER END -->

<!-- Prepare Laravel
  http://itsolutionstuff.com/post/laravel-5-clear-cache-from-route-view-config-and-all-cache-data-from-applicationexample.html
  http://laravel-recipes.com/recipes/283/generating-a-new-application-key -->
 <target name="laravel-prepare">
         <copy file=".env.example" overwrite="false" tofile=".env"/>
        <exec executable="php">
            <arg value="artisan"/>
            <arg value="key:generate"/>
        </exec>
        <exec executable="php">
            <arg value="artisan"/>
            <arg value="optimize"/>
        </exec>
        <exec executable="php">
            <arg value="artisan"/>
            <arg value="cache:clear"/>
        </exec>
        <exec executable="php">
            <arg value="artisan"/>
            <arg value="route:cache"/>
        </exec>
        <exec executable="php">
            <arg value="artisan"/>
            <arg value="view:clear"/>
        </exec>
        <exec executable="php">
            <arg value="artisan"/>
            <arg value="config:cache"/>
        </exec>
 </target>
<!-- Prepare Laravel END -->

 <target name="-check-failure">
  <fail message="PHPUnit did not finish successfully">
   <condition>
    <not>
     <equals arg1="${result.phpunit}" arg2="0"/>
    </not>
   </condition>
  </fail>
 </target>
</project>

